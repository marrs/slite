{
  "author": {
    "name": "Howard Abrams",
    "email": "howard.abrams@gmail.com",
    "url": "http://www.github.com/howardabrams"
  },
  "name": "node-mocks-http",
  "description": "Mock 'http' objects for testing Express routing functions",
  "version": "1.0.1",
  "homepage": "http://www.github.com/howardabrams/node-mocks-http",
  "keywords": [
    "mock",
    "stub",
    "dummy",
    "nodejs",
    "js",
    "testing",
    "test",
    "http",
    "http mock"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/howardabrams/node-mocks-http.git"
  },
  "main": "./lib/http-mock.js",
  "engines": {
    "node": ">=0.6"
  },
  "readme": "node-mocks-http\n===============\n\nMock 'http' objects for testing Express routing functions, but could be used\nfor testing any [Node.js](http://www.nodejs.org) web server applications that\nhave code that requires mockups of the `request` and `response` objects.\n\nExample\n-------\n\nSuppose we have the following magical Express incantation:\n\n    app.get('/user/:id', mod.aroute);\n\nAnd we have ourselves a function to answer that call:\n\n    var aroute = function( request, response ) { ... };\n\nYou can easily test that function with some code like this:\n\n    exports['aroute - Simple testing'] = function(test) {\n        var request  = httpMocks.createRequest({\n            method: 'GET',\n            url: '/user/42',\n            params: { id: 42 }\n        });\n        var response = httpMocks.createResponse();\n\n        aroute(request, response);\n\n        var data = JSON.parse( response._getData() );\n        test.equal(\"Bob Dog\", data.name);\n        test.equal(42, data.age);\n        test.equal(\"bob@dog.com\", data.email);\n\n        test.equal(200, response.statusCode );\n        test.ok( response._isEndCalled());\n        test.ok( response._isJSON());\n        test.ok( response._isUTF8());\n        test.done();\n    };\n\nInstallation\n------------\n\nThis project is available as a NPM package.\n\n    npm install node-mocks-http\n\nAfter this, just include the following in your test files:\n\n    var httpMocks = require('../lib/http-mock');\n\nDesign Decisions\n----------------\n\nWe wanted some simple mocks without any larger framework.\n\nWe also wanted the mocks to simply act like the original, but allow setting values\nbefore calling and inspecting afterwards.\n\nWe are looking for more volunteers to value to this project, including the\ncreation of more objects from the [HTTP module](http://nodejs.org/docs/latest/api/http.html).\n\nRelease Notes\n=============\n\nMost releases fixes bugs with our mocks or add features similar to the\nactual `Request` and `Response` objects offered by Node.js and extended\nby Express.\n\nv 1.0.1\n-------\n\n  * Add support for response redirect and render\n\nv 0.0.9\n-------\n\n  * Add support for response cookies\n\nv 0.0.8\n-------\n\n  * Add support for request headers\n  * Fix wrong function name of set cookies\n\nv 0.0.7\n-------\n\n  * Add support for request cookies\n\nv 0.0.6\n-------\n\n  * Add support for request files\n\nv 0.0.5\n-------\n\n  * Fixed a bug where `response.send()` can take two parameters, the\n    status code and the data to send.\n\nv 0.0.4\n-------\n\n  * Added a `request.session` that can be set during construction (or via\n    calling the `_setSessionVariable()` method, and read as an object.\n\nv 0.0.3\n-------\n\n  * Added a `request.query` that can be set during construction and read\n    as an object.\n\nv 0.0.2\n-------\n\n  * Code refactoring of the `Response` mock.\n\nv 0.0.1\n-------\n\n  * Initial code banged out one late night...\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/howardabrams/node-mocks-http/issues"
  },
  "_id": "node-mocks-http@1.0.1",
  "dist": {
    "shasum": "e1fe955fc95fdd51b226c6b261def063d8f0db33"
  },
  "_from": "node-mocks-http@latest",
  "_resolved": "https://registry.npmjs.org/node-mocks-http/-/node-mocks-http-1.0.1.tgz"
}
